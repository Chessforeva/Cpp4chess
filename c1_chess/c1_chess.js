/*=====================================

CHESS JAVASCRIPT OBJECT (_c1)

Usage sample:

Board1 = _c1.clone();
Board1.setFEN( _c1.sFEN );
Board1.uciMoves("e2e4 e7e5");

The object contains current chess position, with history of chess moves,
playable further or restorable to the initial starting point.
Move pieces by using functions defined as methods.


FUNCTIONS:
o=_c1.clone()             - clones chess object from other (copies chess game)
s=o.dispBoard()           - helping method to display current board
o.setFEN(<FEN string>)    - sets position by given FEN
o.uciMoves(<uci str.>)    - movements by uci string of moves starting from current position
s=o.getFEN()              - obtains FEN string from current position
o.movegen()               - to generate internal list of current possible next moves
s=o.dispGenMoves()        - helping method to display next moves (including all chess signs +,#,=Q)
k=o.uci2I("e1g1")         - locates index of uci move in list after movegen
k=o.movestr2I("0-0")      - the same just by move string
o.mkmove(k)               - does chess movement (use after uci2I) and saves history log
o.unmkmove()              - takes back one chess movement (from history)
s=o.I2long(k)             - formats move string from index in list after movegen
s=o.I2short(k)            - the same just shorter
s=o.hist2uci()            - obtains string of uci moves from history
s=o.hist2pgn()            - the same just in chess pgn notation

status indicators:
o.isCheck()             - is our king under attack?
o.isCheckMate()         - are we checkmated?
o.isStaleMate()         - is stalemate currently?
NOTE: the opponent status (prior move) obtainable by using dispGenMoves

PGN object (chess variants, annotations)
p=_pgn.clone()            - clones empty pgn object
p.PGN(<pgn string>)       - the main functionality that generates tree from pgn-string

p.fromhist(o)             - generates pgn subtree for one main variant from given chess object
s=p.uciMoves()            - obtains uci string of moves from tree of pgn object (main variant only)


_b2D object for 2D board of images
b2=_b2D.clone()            - clones object (prepares another 2D board)
b2.b = Board1.clone()       - provide board information
b2.div = 'd2B1'             - div in which to display
b2.drawBoard()              - this draws the board                                   

To override user clicks:
_b2D_onclick = 'myClick(div,sqAt)';
function myClick(div,sqAt) {};

Simple drawing in canvas element having id='myCanvas' (user is able to save the diagram, old IE not supported)
1.step: Define canvas html element
2.step: _b2D_canvas.init() to prepare images
3.step: _b2D_canvas.drawCanvasBoard( Board1, 'myCanvas' ) draws in canvas on windows.onload = ...
attach click listener, if necessary.


+some functions for displaying chess pgn generated by c1_editor.htm

=====================================*/

/* some functions */

var _c1_domain = 'http://chessforeva.appspot.com/';     // where the images,css and htm files are
_c1_domain = ''; // locally


var CrLf_ = String.fromCharCode(13)+String.fromCharCode(10);

function clone(o) { /* clones objects, simple and good clone */
   var th = [];
   for (var i in o) th[i] = (typeof(o[i]) == 'object' ? clone(o[i]) :  o[i] );
   return th;
}

function trim(s)
 {
 return s.replace(/^\s+|\s+$/g,"");
 }

function strncmp(str, s, mlen)
 {
 return (!(str.substr(0,mlen)==s));
 }

function strstr( str, s )
 {
 var at=str.indexOf(s);
 return (at>=0 ? at+1 : NULL );
 }

function isdigit(s)
 {
  return ( (s>="0" && s<="9") );
 }
 
/*in chess board*/ 
function c_is18(s) { return ( (s>="1" && s<="8") ); }
function c_isAH(s) { return ( (s>="a" && s<="h") ); }

function isalpha(s)
 {
  return ( (s>="a" && s<="z") || (s>="A" && s<="Z") );
 }

function spaces(n)
 {
  var r='';
  for(var q=n;q>0;q--) r+=' ';
  return r;
 }

function startsWith(s,s1)
{ return ( s.length>= s1.length ? s.substr(0,s1.length)==s1 : false ); }

function replaceAll(s,s1,s2)
{ var regex = new RegExp(s1, "g"); return s.replace(regex,s2); }
function replaceAll2(s,a1,a2)
{ for(var i=0;i<a1.length;i++) s=replaceAll(s,a1[i],a2[i]); return s; }
function replaceAll3(s,s1,s2)
{ var w='';
  for(var i=0;i<s.length;i++)
   if(s.substr(i,s1.length)==s1) { w+=s2; i+=s1.length-1; }
   else w+=s.charAt(i);
  return w; }

function ArrContains( arr, val )
{ return (("," + arr.valueOf().toString() + ",").indexOf("," + val.toString() + ",") >= 0); }


function getqs(qs, qp)  /* query string, parm id */
{
var qr='';
var a = qs.indexOf("?")
if(a>=0)
 {
 qr = qs.substr(a+1);
 a = qr.indexOf(qp);
 qr= qr.substr(a+qp.length);
 a = qr.indexOf("&")
 if(a>=0) qr=qr.left(a);
 }
return qr;
}

function ReplUrl(h)		// Replaces urls to links...
{
var s=h.toUpperCase();
var w='';
for(var i=0;i<s.length;i++)
 {
  var u=''; var n=0;
  if(s.substr(i,7)=="HTTP://") u=h.substr(i);
  else if(s.substr(i,8)=="HTTPS://") u=h.substr(i);
  else if(s.substr(i,4)=="WWW.") { n=7; u="http://"+h.substr(i); }
  if(u.length>0)
   {
    for(var a=0;a<u.length;a++)
      if(('"' + "' ").indexOf(u.charAt(a))>=0) { u=u.substr(0,a); break; } 
    var k=u.length-n;     
    w+='<a href="' + u + '" target="blank" >' + h.substr(i,k) + '</a>' + h.substr(i+k);
    i+=k-1;
   }
  else w+=h.charAt(i);
 }
return w;
}

// detects if image is loaded and ready for displaying
function IsImgLoaded(img)
{
 return !((!img.complete) || (typeof img.naturalWidth !== "undefined" && img.naturalWidth === 0));
}

_c1c = {
    N0: [],
    init: function() { for (var i = 0; i<1000; i++) this.N0[i] = 0; }
   }
_c1c.init();


function ChessUnicode(c)
{
 pc='&#32;';
 if(c=='K') pc='&#9812;';
 if(c=='Q') pc='&#9813;';
 if(c=='R') pc='&#9814;';
 if(c=='B') pc='&#9815;';
 if(c=='N') pc='&#9816;';
 if(c=='P') pc='&#9817;';
 if(c=='k') pc='&#9818;';
 if(c=='q') pc='&#9819;';
 if(c=='r') pc='&#9820;';
 if(c=='b') pc='&#9821;';
 if(c=='n') pc='&#9822;';
 if(c=='p') pc='&#9823;';
 if(c==0) pc='';
 return pc;
}

/* CHESS object with methods and properties */

_c1 = {

    /* constants */
    sFEN: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",

    /* piece on board */

    e:0, wk:1, wq:2, wr:3, wb:4, wn:5, wp:6,
         bk:7, bq:8, br:9, bb:10, bn:11, bp:12,

    S: [ " ","K","Q","R","B","N","P","k","q","r","b","n","p" ],


    isWhite:function(p) {
     return (isalpha(p) ? ("KQRBNP").indexOf(p)>=0 : (p>0 && p < this.bk));
    },

    isBlack:function(p) {
     return (isalpha(p) ? ("kqrbnp").indexOf(p)>=0 : (p > this.wp));
    },
    

    pcI:function(s) {
     return this.S.indexOf(s);
    },
    
    sq2i:function(sq) {
     return ((sq.charCodeAt(1)-49)*8) + (sq.charCodeAt(0)-97);
    },
    
    i2sq:function(i) {
     return ( String.fromCharCode(97+(i%8)) + String.fromCharCode(49+parseInt(i/8)) );
    },
    
    m2uci:function(h) {
     return ( this.i2sq(h.f) + this.i2sq(h.t) + (h.p==0?'':h.p.toLowerCase() ) );
    },
    
    iX:function(i) { return (i%8); },
    iY:function(i) { return parseInt(i/8); },
    

    /* BOARD */

    B: _c1c.N0.slice(64),           // 64 empty squares
    sm: 1,                          // side to move now (1-white,-1 black)
    cs: [1,1,1,1],                  // KQkq castlings
    ep: -1,                         // en-passant square
    mc: 0,                          // move counter
    genml:[],                       // list of next moves (from square number, to square number),...
    hist:[],                        // list of history for unmake move
    
    setFEN:function(s) {            /* sets position by FEN */
    
    var a = s.split(" ");
    if (a.length>=2)
     {
      this.B = _c1c.N0.slice(64);
      var y = 7; var x = 0;
      for(var i=0; i<a[0].length; i++)
       {
       var c = a[0].charAt(i);
       if(c!='/')
        {
        if(isdigit(c)) x+=parseInt(c)-1;
        else if(isalpha(c)) this.B[(y*8)+x]=c;
        if(x>6) { x=0; y--; } else x++;
        }
       }
      this.sm = (a[1]=='w'?1:-1);
      this.cs=[1,1,1,1];
      if( a.length>2 )
       {
       for(var j=0;j<4;j++)
        if( a[2].indexOf( ('KQkq').charAt(j) )<0 ) this.cs[j]=0;
       }
      this.ep = (( a.length>3 && a[3]!='-' ) ? this.sq2i(a[3]) : -1 );
      // ignore repeating move counter
      this.mc = ( a.length>5 ? ((parseInt(a[5])-1)*2)+(this.sm<0?1:0) : 0 );
      this.hist = [];
      this.movegen();
     } 
    },
    
    getFEN:function() {                 /* gets current FEN of position */
    
    var s='';    
    for(var y=7; y>=0; y-- )
     {
     var a=0;
     for(var x=0; x<8; x++ )
      {
      var c=this.B[(y*8)+x];
      if(c==0) a++; else { if(a>0) s+=a.toString(); a=0; s+=c; }
      }
     if(a>0) s+=a.toString();
     if(y>0) s+='/';
     }    
    s+=' '+(this.sm>0?'w':'b')+' ';
    if( this.cs.toString().indexOf('1')<0 ) s+='-';
    else
     {
      for(var j=0;j<4;j++)
       if(this.cs[j]>0) s+=('KQkq').charAt(j);
     }
    s+=' '+(this.ep<0 ? '-' : this.i2sq(this.ep))+' 0 '+(parseInt(this.mc/2)+1).toString();
    return s;
    },    

    dispBoard:function() {            /* displays board position (simple text) */
    
    var s='<div style="color:white;background-color:black;width:60;height:100;'+
        'font-family:Courier New;font-size:12px;line-height:12px">';
    for(var y=7; y>=0; y-- )
     {
     for(var x=0; x<8; x++ )
      {
      var c=this.B[(y*8)+x];
      if(c!=0) s+=c;
      else s+='.';      //(x+y)%2>0 for 
      } 
     s+='<br>';
     }
     s+='</div>';
     return s;
    },
    
    dispBoard2:function() {            /* displays board position (Table of Unicoded chess pieces) */
    
    var s='<div style="width:162px;height:199px;color:white;background-color:black;font-family:Courier New;' +
        'font-size:12px;line-height:12px"><table>';
    var q=' style="color:black;background-color:white;width:12px;height:12px"';
    for(var y=7; y>=0; y-- )
     {
     s+='<tr>';
     for(var x=0; x<8; x++ )
      {
      var c=this.B[(y*8)+x];
      s+='<td'+q+'>'+ChessUnicode(c)+'</td>';
      } 
     s+='<td'+q+'>'+ (y+1).toString() +'</td></tr>';
     }
     s+='<tr>';
     for(x=0; x<8; x++ ) s+='<td'+q+'>'+ ('ABCDEFGH').charAt(x) +'</td>';
     s+='</tr></table></div>';
     return s;
    },  

    movegen:function() {            /* generates list of moves */
    this.moveg1(0);
    },    
    
    moveg1:function(ch) {           /* ch=0 first generate, c=1 checkmate detection */

    this.genml = [];
    for(var i=0; i<64; i++)
     {
      var c=this.B[i];
      if(c!=0)
       {
        if((this.sm>0) == this.isWhite(c))
         {
          c=c.toLowerCase();
          if(c=='p') this.pawngen(i);
          else if(c=='n') this.knightgen(i);
          else if(c=='b') this.bishopgen(i);
          else if(c=='r') this.rookgen(i);
          else if(c=='q') this.queengen(i);
          else if(c=='k') this.kinggen(i);
         }
       }
     } 
     
    var kn=this.genml.length;
    if(ch>0) return (kn==0);
    
    if(kn>0)
      {
      for(var k=0;k<kn;k++)
       {
       this.mkmove(k);
       if(this.isCheck())
        {
         var B2 = this.clone();
         this.genml[k].c = ( B2.moveg1(1) ? '#' : '+' );
        } 
       this.unmkmove();
       }
      }
    },
    
    pawngen:function(i) {            /* generates all pawn moves */
    
    var X=this.iX(i); var Y=this.iY(i);
    var p=0; var r=0;
    if(this.sm>0)
     {
      if(Y==6) r=1;
      if(X>0 && Y<7)
       {
       p=this.B[i+7];
       if(this.isBlack(p) || (this.ep==i+7) ) this.addmove(i,i+7,r,0);
       }
      if(X<7 && Y<7)
       {
       p=this.B[i+9];
       if(this.isBlack(p) || (this.ep==i+9) ) this.addmove(i,i+9,r,0);
       }
      if(Y<7 && this.B[i+8]==0)
       {
       this.addmove(i,i+8,r,0);
       if(Y==1 && this.B[i+16]==0) this.addmove(i,i+16,0);
       } 
     }
    else
     {
      if(Y==1) r=1;
      if(X<7 && Y>0)
       {
       p=this.B[i-7];
       if(this.isWhite(p) || (this.ep==i-7) ) this.addmove(i,i-7,r,0);
       }
      if(X>0 && Y>0)
       {
       p=this.B[i-9];
       if(this.isWhite(p) || (this.ep==i-9) ) this.addmove(i,i-9,r,0);
       }
      if(Y>0 && this.B[i-8]==0)
       {
       this.addmove(i,i-8,r);
       if(Y==6 && this.B[i-16]==0) this.addmove(i,i-16,0,0);
       }       
     }
    
    },

    knightgen:function(i) {            /* generates all knight moves */
    
    var X=this.iX(i); var Y=this.iY(i);
    for(var w=-2;w<3;w++)
     for(var z=-2;z<3;z++)
      if( Math.abs(w)+Math.abs(z)==3 )
        {
         var m=X+w; var n=Y+z;
         if(m>=0 && m<8 && n>=0 && n<8)
            {
            var j=(8*n)+m;
            var c=this.B[j];
            if(c==0 || this.isBlack(c)==(this.sm>0) ) this.addmove(i,j,0,0);
            }
        }    
    },
    
    bishopgen:function(i) {            /* generates all bishop moves */
    
    var X=this.iX(i); var Y=this.iY(i);
    for(var w=-1;w<2;w+=2)
     for(var z=-1;z<2;z+=2)
      for(var q=1;q<8;q++)
        {
         var m=X+(q*w); var n=Y+(q*z);
         if(m>=0 && m<8 && n>=0 && n<8)
            {
            var j=(8*n)+m;
            var c=this.B[j];
            if(c==0 || this.isBlack(c)==(this.sm>0) ) this.addmove(i,j,0,0);
            if(c!=0) q=8;
            }
         else q=8;
        }    
    },
    
    rookgen:function(i) {            /* generates all rook moves */
    
    var X=this.iX(i); var Y=this.iY(i);
    for(var w=-1;w<2;w++)
     for(var z=-1;z<2;z++)
      if(w==0 || z==0)
       for(var q=1;q<8;q++)
        {
         var m=X+(q*w); var n=Y+(q*z);
         if(m>=0 && m<8 && n>=0 && n<8)
            {
            var j=(8*n)+m;
            var c=this.B[j];
            if(c==0 || this.isBlack(c)==(this.sm>0) ) this.addmove(i,j,0,0);
            if(c!=0) q=8;
            }
         else q=8;            
        }    
    },
    
    queengen:function(i) {            /* generates all queen moves */
    
    this.rookgen(i);
    this.bishopgen(i);    
    },
    
    kinggen:function(i) {            /* generates all king moves */
    
    var X=this.iX(i); var Y=this.iY(i);
    for(var w=-1;w<2;w++)
     for(var z=-1;z<2;z++)
        {
         var m=X+w; var n=Y+z;
         if(m>=0 && m<8 && n>=0 && n<8)
            {
            var j=(8*n)+m;
            var c=this.B[j];
            if(c==0 || this.isBlack(c)==(this.sm>0) ) this.addmove(i,j,0,0);
            }            
        }    
    var q=(this.sm>0?0:2);
    for(var x=0;x<2;x++)
      if(this.cs[x+q]>0)
        {
        var e1=(this.sm>0?4:60);
        var d=(x==0?1:-1);
        var cc=1;
        for(var y=1;y<3+x;y++)
            {
            if(this.B[ e1+(d*y) ]!=0) cc=0;
            }
        if(cc>0)
            {
            for(var y=1;y<3;y++)
                this.B[e1+(d*y)]=(this.sm>0?'K':'k');
            cc=(this.isCheck()?0:1);
            for(var y=1;y<3;y++)
                this.B[e1+(d*y)]=0;
            if(cc>0) this.addmove(e1,e1+(2*d),0,x+1);
            }
        }      
    },   
    
    addmove:function(f,t,r,k) {    /* move from square to square, promoted piece,
                                 chech-mate sign, castling sign */
    var z = this.B[f];
    if(r>0)
     {
      this.genml.push( {f:f,t:t,p:'Q',c:0,z:z,k:0} );
      if(this.addmvvalid()) this.genml.pop();
      else
        {
        this.genml.push( {f:f,t:t,p:'R',c:0,z:z,k:0} );
        this.genml.push( {f:f,t:t,p:'B',c:0,z:z,k:0} );
        this.genml.push( {f:f,t:t,p:'N',c:0,z:z,k:0} );
        }
     }
    else
        {
        this.genml.push( {f:f,t:t,p:0,c:0,z:z,k:k} );
        if(this.addmvvalid()) this.genml.pop();
        }
    },
    
    addmvvalid:function() {          /* pre-validation of move */
    
    var l=this.genml.length-1;
    this.mkmove(l);
    this.sm=-this.sm;
    var v=this.isCheck();   // is king still under check
    this.sm=-this.sm;
    this.unmkmove();
    return v;
    },
    
    dispGenMoves:function () {          /* displays generated moves */
    
    s='';
    for(var k=0;k<this.genml.length;k++)
      s+=(k==0?'':', ')+this.I2long(k);
    return s; 
    },
    
    isStaleMate:function () {          /* detects stalemate */
    var r = 0;
    if( !this.isCheck() )
     {
      this.movegen();
      if (this.moveg1(1)) r=1;
     }
    return (r>0);
    },

    isCheckMate:function () {          /* detects checkmate */
    var r = 0;
    if( this.isCheck() )
     {
      this.movegen();
      if (this.moveg1(1)) r=1;
     }
    return (r>0);
    },    
    
    isCheck:function () {             /* detects check right now to king to move */
    
    var t=0;
    for(var i=0;t==0 && i<64;i++)
     {    
     var p=this.B[i];
     if((p=='K' && this.sm>0) || (p=='k' && this.sm<0))
        {
         /* directional moves */
        var X=this.iX(i); var Y=this.iY(i);
        for(var w=-1;t==0 && w<2;w++)
         for(var z=-1;t==0 && z<2;z++)
           for(var q=1;t==0 && q<8;q++)
            {
            var m=X+(q*w); var n=Y+(q*z);
            if(m>=0 && m<8 && n>=0 && n<8)
                {
                var j=(8*n)+m;
                var c=this.B[j];
                if( c!=0 && this.isBlack(c)==(this.sm>0) )
                    {
                    if((w==0 || z==0) && ((c=='r' && this.sm>0) || (c=='R' && this.sm<0))) t=1;
                    else if((w!=0 && z!=0) && ((c=='b' && this.sm>0) || (c=='B' && this.sm<0))) t=1;
                    else if((c=='q' && this.sm>0) || (c=='Q' && this.sm<0)) t=1;
                    else if((q==1) && ((c=='k' && this.sm>0) || (c=='K' && this.sm<0))) t=1;
                    else if((q==1) && (w!=0) && (z!=0) &&
                        ((z>0)==(this.sm>0)) && ((c=='p' && this.sm>0) || (c=='P' && this.sm<0))) t=1;
                    } 
                if(c!=0) q=8;
                }
            else q=8;
            }
            
        /*knight moves */
        for(var w=-2;t==0 && w<3;w++)
         for(var z=-2;t==0 && z<3;z++)
            if( Math.abs(w)+Math.abs(z)==3 )
            {
            var m=X+w; var n=Y+z;
            if(m>=0 && m<8 && n>=0 && n<8)
                {
                var j=(8*n)+m;
                var c=this.B[j];
                if((c=='n' && this.sm>0) || (c=='N' && this.sm<0)) t=1;
                }
            }       
                          
        }
     }   
     return (t>0);   
    },
    
    mkmove:function(k) {            /* process move k from genlist created by movegen */
    
    var o=this.genml[k];
    var p=this.B[o.f];
    o.u = this.B[o.t];
    o.e = (this.ep==o.t && (p=='p'|| p=='P') ? o.t+(this.sm>0?-8:8) : -1);
    o.cs = this.cs.slice();
    o.ep = this.ep;
    this.hist.push(o);
    
    this.B[o.t]=(o.p!=0? (this.sm<0 ? o.p.toLowerCase() : o.p) :p);
    this.B[o.f]=0;
    if(o.e>=0) this.B[o.e]=0;
    
    var x=(this.sm>0?0:2);
    var e1=(this.sm>0?4:60);
    var h1=(this.sm>0?7:63);
    var a1=(this.sm>0?0:56);
    if(o.f==e1) { this.cs[0+x]=0; this.cs[1+x]=0; }
    if(o.f==h1 || o.t==h1) this.cs[0+x]=0;
    if(o.f==a1 || o.t==a1) this.cs[1+x]=0;
    if(o.k>0)
     {
      if(o.k==1) { this.B[h1-2]=this.B[h1]; this.B[h1]=0; this.cs[0+x]=0; }
      else { this.B[a1+3]=this.B[a1]; this.B[a1]=0; this.cs[1+x]=0; }
     }
    
    this.ep=-1;
    if(p=='p'|| p=='P')
     {
      var d=(o.t-o.f);
      if(Math.abs(d)==16) this.ep=o.f+(d/2);
     } 
                 
    this.sm=-this.sm;
    this.mc++;
    },
    
    unmkmove:function() {          /* process unmake last move */
    
    var o=this.hist.pop();    
    this.B[o.f]=o.z;
    this.B[o.t]=o.u;
    if(o.e>=0) this.B[o.e]=(this.sm>0?'P':'p');
    if(o.k>0)
     {
      if(o.k==1) { this.B[o.f+3]=this.B[o.f+1]; this.B[o.f+1]=0; }
      else { this.B[o.f-4]=this.B[o.f-1]; this.B[o.f-1]=0; }
     }
    this.cs=o.cs.slice();
    this.ep=o.ep;
    this.sm=-this.sm;
    this.mc--;
    },
    
    uci2I:function(u) {         /* locates k in genlist by given uci move e2e4 e1g1 a7a8q */

    var f=this.sq2i(u.substr(0,2));
    var t=this.sq2i(u.substr(2,2));
    var p=(u.length>4 ? u.charAt(4).toUpperCase() : 0);
    var r=-1;
    for(var k=0;r<0 && k<this.genml.length;k++)
     {
      var l=this.genml[k];
      if(l.f==f && l.t==t && (p==0 || l.p==p)) r=k;
     }
    return r;     
    },
    
    uciMoves:function(us) {     /* processes list of uci moves */

    var a = us.split(" ");
    for(var i=0;i<a.length;i++)
     {
      if(a[i].length>3)
       {
       this.movegen();
       var k=this.uci2I(a[i]);
       if(k>=0) this.mkmove(k);
       }
     }
    this.movegen();
    },
    
    hist2uci:function() {       /* history to uci move list */
    
    var s='';
    for(var i=0;i<this.hist.length;i++)
     {
      var h = this.hist[i];
      s+=(i==0 ? '' : ' ')+ this.m2uci(h);
     }
    return s; 
    },
    
    hist2pgn:function() {       /* history to pgn of short notated moves */
    
    var s='';
    var n=0;
    var B2 = this.clone();
    B2.setFEN( this.sFEN );
    for(var i=0;i<this.hist.length;i++)
     {
      var h = this.hist[i];
      B2.movegen();
      var r=-1;
      for(var k=0;r<0 && k<B2.genml.length;k++)
        {
        var l=B2.genml[k];
        if(l.f==h.f && l.t==h.t && (h.p==0 || l.p==h.p)) r=k;
        }
      if(r<0) break;
      s+=(B2.sm>0 ? (i>0?' ':'')+(parseInt(B2.mc/2)+1).toString()+'.' : ' ');
      s+=B2.I2short(r);
      B2.mkmove(r);
     }
    return s; 
    },    

    I2long:function(k) {       /* long notated move Ng1-f3 */
    
    var o=this.genml[k];
    if(o.k>0) return ('0-0'+(o.k>1?'-0':''));
    var s='';
    var c=this.B[o.f].toUpperCase();
    var x=(this.B[o.t]!=0 || this.ep==o.t);
    s+=(c=='P'?'':c)+this.i2sq(o.f)+(x?'x':'-')+this.i2sq(o.t);
    s+=(o.p==0?'':'='+o.p)+(o.c==0?'':o.c);
    return s;  
    }, 

    I2short:function(k) {      /* short notated move Nf3 */
    
    var s=this.I2long(k);
    var o=this.genml[k];
    if(o.k>0) return s;
    var ps=((o.z=='p' || o.z=='P')?0:1);
    var w=s.split("");
    
    for(var q=0;q<2;q++)
     {
     var t=0;
     for(var i=0;i<this.genml.length;i++)
      {
       var u=this.genml[i];
       if(this.B[o.f]==this.B[u.f])
        {
        if(q==0 && this.iY(o.f)==this.iY(u.f) && o.t==u.t) t++;
        if(q==1 && this.iX(o.f)==this.iX(u.f) &&
         (o.t==u.t || (ps==0 && this.iX(o.f)==this.iX(o.f))) ) t++;
        }
      }
     if(t<2)
      {
       if(q==0 && ps>0) w[ps+0]='';
       if(q==1) w[ps+1]='';
      }
     }
    if(ps==0)
     {
      w[ps+1]='';
      if(this.iX(o.f)==this.iX(o.t)) w[ps+3]='';
      else w[ps+4]='';
     }
    w[ps+2]='';
    
    s=''; for(q=0;q<w.length;q++) s+=w[q];
    return s;
    },

    movestr2I:function(s) {      /* finds index of chess move from given string (not smartest way) */

    var k=-1;
    for(var i=0;k<0 && i<this.genml.length;i++)
      {
       var o=this.genml[i];
       var u={ p:0, fx:-1, fy:-1, tx:-1, ty:-1 };
       for(var j=0;j<s.length;j++)
        {
         var c=s.charAt(j);
         var w=s.charCodeAt(j);
         if(j==0) u.p=(("O0KQRBN").indexOf(c)<0?'P':c);
         if(c>='a' && c<='h')
          {
           if(u.fx<0) u.fx=w-97;
           else if(u.tx<0) u.tx=w-97;
          }
         if(c>='0' && c<='8')
          {
           if(u.fy<0) u.fy=w-49;
           else if(u.ty<0) u.ty=w-49;
          }
        }
       if(u.tx<0 && u.fx>=0) { u.tx = u.fx; u.fx=-1; }
       if(u.ty<0 && u.fy>=0) { u.ty = u.fy; u.fy=-1; }
       if((o.k==1 && ("O-O/0-0").indexOf(s)>=0) ||
          (o.k==2 && ("O-O-O/0-0-0").indexOf(s)>=0) ||
          ((u.p == this.B[o.f].toUpperCase()) &&
            (u.fx<0 || u.fx==this.iX(o.f)) &&
            (u.fy<0 || u.fy==this.iY(o.f)) &&
            (u.tx<0 || u.tx==this.iX(o.t)) &&
            (u.ty<0 || u.ty==this.iY(o.t)))) k=i;
      }
    return k;
    },        
    clone: function () { return new clone(this) }
}

/* DISPLAYING */

/* Some internal functions for PGN displaying */

// some known subst. of resulting htm
var _c1_em = [ '&nbsp;&nbsp;&nbsp;&nbsp;', '<br>', '0-0-0','1/2-1/2',')">',
  '"_pgn','_pOc(','</div>','onclick=','<div class=','" id="_pI',
  ' width="', 'height="', 'style="float:', '<canvas id="_pgn_D_', '></canvas>',
  "'", '@' ];
  
function _c1_dcd(s)     /* decode compressed html */
{
 var w='';
 for(var i=0;i<s.length;i++)
  {
   if(s.charAt(i)=='@') w+=_c1_em[ parseInt(s.charAt(++i),32) ];
   else w+=s.charAt(i);
  }
 return w;
}


var _pgn_Pt = [];           /* contains FEN positions for onclick */

var _pgn_Pt_pr = -1;        /* which was the last pressed move by user? */

/* to set position without a move */
function _pOc0(n)
{
 _pOc(n,0,1);
}

/* onclick function */
function _pOc(n,flg,no_move)
{
 n = _c1_upd_multi_by(n);

 if(!flg && _c1_AutoPlay>0) _c1_AutoPlay = -1;  // stop

 if(n==_pgn_Pt_pr || n>_pgn_Pt.length) return;
 
 var B = _c1.clone();
 var p = _pgn_Pt[n];

 if(p.FEN.length==0)
  {
   var p2={FEN:'0'};
   for(var n1=n-1;n1>=0;n1--)
    {
    p2 = _pgn_Pt[n1];
    if(p2.FEN.length>0) break;
    }
   if(p2.FEN=='0') p2.FEN=_c1.sFEN;
   B.setFEN( p2.FEN );
   if(!no_move)
    {
     for(;n1<=n;n1++)
      {
      p = _pgn_Pt[n1];
      var k=B.uci2I( p.uci );
      B.mkmove(k);
      B.movegen();
      }
    }
  }
 else
  {
   if(p.FEN=='0') p.FEN=_c1.sFEN;
   B.setFEN( p.FEN );
   if(!no_move)
    {
    var k=B.uci2I( p.uci );
    B.mkmove(k);
    B.movegen();
    }
  }

 if(no_move) _c1_AutoPl_1stmv += '[' + (_c1_multi+n) + ']';
   
 var idk = _pgn_Pt[n].idk;

 if(!no_move)
  { 
  var div = null;
  var dt = '';
 
  for(var c=0;c<2;c++)
   {
   if(_pgn_Pt_pr>=0)
    {
    var ID = _pgn_Pt_pr + _c1_multi.cur;
    div = document.getElementById('_pI'+ID);
    if(div!=null)
        {
        dt = div.innerHTML;
        dt = (c==0 ? replaceAll2(dt,['<u>','</u>'],['','']) : '<u>'+dt+'</u>');
        div.innerHTML = dt;
        }
    }
   if(c==0) _pgn_Pt_pr=n;
   }
 }
  
 _c1_DgL(1,idk,B,flg);  // redraw canvas
}

function _c1_DgL(c,idk,B,flg)   /* loop canvas for the game */
{
 for(var k=1;;k++)
  {
  var cID = '_pgn_D_'+idk+k.toString()
  var canv = document.getElementById(cID);
  if(canv==null) break;
  if(c==0)
   {
    canv.addEventListener('click',function (e) { _c1_onCanvasClick(idk) });
    canv.style.cursor = "pointer";
   }
  else if(c==1) _b2D_canvas.drawCanvasBoard( B, cID, flg );
  }
}

function _c1_onCanvasClick(idk) /* onclick event */
{
 _c1_upd_multi_by(idk);

 var p = {idk:-1}; var i=_pgn_Pt_pr;
 if(i>=0 && i<_pgn_Pt.length) p = _pgn_Pt[i];
 if(p.idk!=idk) _pOc(idk,1); 
 else if(_c1_AutoPlay>0) { _c1_AutoPlay = -1; return; }
 
 if(_c1_AutoPlay==0) _c1_startAutoPlay();
}

/* playing on canvas click */
var _c1_AutoPlay = 0;
var _c1_AutoPl_1stmv = '';

function _c1_startAutoPlay()
{

 var f=(_c1_AutoPlay<0);
 _c1_AutoPlay = 0;

 if(!f)
 {
 var i=_pgn_Pt_pr;

 var c = '[' + (_c1_multi.cur+i) + ']';
 if(_c1_AutoPl_1stmv.indexOf(c)>=0)
  {
   _c1_AutoPl_1stmv = replaceAll(_c1_AutoPl_1stmv, c, '');
   _c1_AutoPlay = 1;
  }
 else
 {
  var p = _pgn_Pt[i];
  for(;;)
  {
   i++;
   if(i>=_pgn_Pt.length) break;
   var p2 = _pgn_Pt[i]; 
   if(p.idk!=p2.idk) break;
   if(p.v!=p2.v) break;	// simply stop if other variant or current is over
   if(p.v==p2.v) 
      {
      _c1_AutoPlay = 1;
      break;
      }
  }
 }

 if(_c1_AutoPlay) {  _pOc(i,1); setTimeout('_c1_startAutoPlay()',1000); }
 }

} 

// generates _pgn_Pt array from a compressed string
function _c1_Pt_add(s)
{
 for(var i=0;i<s.length-1;i++)
  {
   if(s.charAt(i)=='i')
    {
     var w=s.substr(i+1,100);
     var a=w.indexOf('v'); i+=a; var idk=w.substr(0,a); w=w.substr(a+1);
     a=w.indexOf('u'); i+=a; var vr=w.substr(0,a); w=w.substr(a+1);
     a=w.indexOf('z'); i+=a; var uci=w.substr(0,a); w=w.substr(a+1);
     a=w.indexOf('i'); i+=a; var fen=w.substr(0,a);
     _pgn_Pt.push({idk:parseInt(idk), v:parseInt(vr), uci:uci, FEN:fen});
    }
  }
}

// MULTI-POSTS safe code updated Oct.2014
if(typeof(_c1_multi)=="undefined")
 {
 var _c1_multi = {cur:0, a:[] };// saves data for multi-post blogs
 }

function _c1_ML(n0)
{
  _c1_multi.a.push({N:n0, p: clone(_pgn_Pt)});	// save
}

function _c1_upd_multi_by(N)  // simply sets pointer to array from multi-list
{
 var l = _pgn_Pt.length;
 for(var i=0;i<_c1_multi.a.length;i++)
  {
   var o = _c1_multi.a[i];
   if( N>(o.N-100) && N<(o.N+9999) )
    {
     _pgn_Pt = o.p;
     _c1_multi.cur = o.N;
     N -= o.N;
     if(_pgn_Pt.length!=l) _pgn_Pt_pr = -1;
     break;
    }
  }
 return N;
}

// draws initial diagrams on load, adds event listeners
function _c1_Pt_OnLd(a,no_move)
 {
  for(var i=0;i<a.length;i++)
   {
   if(no_move) _pOc0(a[i]); else _pOc(a[i]);
   _c1_DgL(0,a[i]);
   }
 }
    
/* 2D board object based on images */
_b2D = {
        
    b: _c1.clone() ,  /*board*/
    div: '',  /*div to draw in*/
    
    imgSource: _c1_domain + 'd_img/',
    
    drawBoard:function() {       /* displays board in div container */
    
    var dEl = document.getElementById(this.div);
    if(dEl==null) return;
    
    var W=parseInt(dEl.style.width);
    var H=parseInt(dEl.style.height);
    if(W>80 && H>80) { W-=4; H-=4; }
    else { W=8*70; H=8*70; }

    var qW = ' width="' + (W>>3) + 'px" ';
    var qH = ' height="' + (H>>3) + 'px" ';
    
    var h2 = ' height="2px" ';
    var w2 = ' width="2px" ';
    var s0='<img src="' + this.imgSource + 'd0.jpg"' + w2 + h2 + '>';
    var s1 = s0;
    var sv = '<img src="' + this.imgSource + 'dv.jpg"' + w2 + qH + '>';
    for(var j=0;j<8;j++)
     s1+= '<img src="' + this.imgSource + 'dh.jpg"' + qW + h2 + '>';
    s1+=s0+'<br>';
    var s=s1;
    for(var y=7; y>=0; y-- )
     {
     s+=sv;
     for(var x=0; x<8; x++ )
      {
      var sq=(y*8)+x;
      var c=this.b.B[sq];
      var bg=((y+x)%2>0 ? 'w' : 'b');
      var pc = (isalpha(c) ? c.toUpperCase() : '');
      
      s+='<img src="' + this.imgSource + 
       (!isalpha(c) ? '' :
         (_c1.isBlack(c)? 'b' : 'w')+
         (pc=='P' ? 'p' : pc)) + bg + '.jpg"' + qW + qH +
         ' onclick="_b2D_event_onclicked(' + "'" + this.div + "'" +
          ','+sq+')" ' + '>';
      } 
     s+=sv+'<br>';
     }
    s+=s1; 
    dEl.innerHTML = s;
    },
         
    clone: function () { return new clone(this) }
    
 }

/* Override function for click event */
_b2D_onclick = '';

function _b2D_event_onclicked(div, square)    /* event on click */
    {
    var sqAt = _c1.i2sq(square);
    if(_b2D_onclick.length>0) eval(_b2D_onclick);
    }

    
/* simple canvas redraw */
_b2D_canvas = 
    {       
    id0: null,
    idv: null,
    idh: null,
    wbg: null,
    bbg: null,
    imgs: [],
    
    init: function() {
        this.id0 = new Image();
        this.idv = new Image();
        this.idh = new Image();
        this.wbg = new Image();
        this.bbg = new Image();
        this.id0.src = _b2D.imgSource + 'd0.jpg';
        this.idv.src = _b2D.imgSource + 'dv.jpg';    
        this.idh.src = _b2D.imgSource + 'dh.jpg';    
        this.wbg.src = _b2D.imgSource + 'w.jpg';    
        this.bbg.src = _b2D.imgSource + 'b.jpg';      
        for(var i=0;i<12;i++)
         {
          this.imgs.push( new Image() );
          this.imgs.push( new Image() );
          var iSrc = _b2D.imgSource + ( (i<6?'w':'b')+("pNBRQK").charAt(i%6) );
          this.imgs[i<<1].src = iSrc + 'w.jpg';
          this.imgs[(i<<1)+1].src = iSrc + 'b.jpg';
         }
      },
    
    isLoaded: function() {
        var i,f=1;
        var a=[ this.id0, this.idv, this.idh, this.wbg, this.bbg ].concat(this.imgs);
        for(i in a)
         if(!IsImgLoaded(a[i])) { f=0; break; }
        return f;
      },
      
    cs: null,
    cx: null,
    x:0, y:0, W:0, H:0, qW:0, qH:0,
      
    drawCanvasBoard:function(b,canvas,lastuci) {       /* draws board in canvas */
    
    this.cs = document.getElementById(canvas);
    if(this.cs==null) return;
    var canvOK = this.cs.getContext;		//IE canvas not working
    if(!canvOK) return;                     // canvas (2D) not supported

    this.cx = this.cs.getContext('2d');
    
    this.W=parseInt(this.cs.width);
    this.H=parseInt(this.cs.height);
    
    if(this.W>80 && this.H>80) { this.W-=4; this.H-=4; }
    else { this.W=8*70; this.H=8*70; }
    this.qW = (this.W>>3);
    this.qH = (this.H>>3);
    this.x = 0;
    this.y = 0;
    
    var fi = {i:-1,x:0,y:0};
    var ti = {i:-1,x:0,y:0};
    if(lastuci && b.hist.length>0)
      {
      var h = b.hist[b.hist.length-1];
      var lastmv = b.m2uci(h);
      fi.i = b.sq2i(lastmv.substr(0,2));
      ti.i = b.sq2i(lastmv.substr(2,2));
      }
      
    this.dwdh();
    for(var y=7; y>=0; y-- )
     {
     this.dwdv();
     for(var x=0; x<8; x++ )
      {
      var sq=(y*8)+x;
      var c=b.B[sq];
      var bg=((y+x)%2>0 ? 'w' : 'b');
      var img0=(bg=='w'? this.wbg: this.bbg);
      
      if(isalpha(c))
      {
       img0 = this.imgs[ (("PNBRQKpnbrqk").indexOf(c)<<1) + (bg=='w'?0:1) ];
      }

      this.cx.drawImage(img0, this.x,this.y, this.qW, this.qH );
      if(fi.i==sq) { fi.x=this.x; fi.y=this.y };
      if(ti.i==sq) { ti.x=this.x; ti.y=this.y; ti.img=img0 };
      
      this.x+=this.qW;
      }
      
     this.dwdv(); this.x = 0; this.y+=this.qH;
     }
     this.dwdh();
   
     if(fi.i>=0 && ti.i>=0)
      {  
       this.cx.beginPath();
       this.cx.strokeStyle = '#663300';
       this.cx.lineCap = 'round';
       this.cx.lineWidth = 1;
       this.cx.moveTo(fi.x+(this.qW>>1), fi.y+(this.qH>>1)); 
       this.cx.lineTo(ti.x+(this.qW>>1), ti.y+(this.qH>>1));
       this.cx.stroke();
       this.cx.closePath();
       this.cx.drawImage(ti.img, ti.x, ti.y, this.qW, this.qH );
      }
     
  },
    
    dwd0: function() {
        this.cx.drawImage(this.id0, this.x,this.y, 2, 2 );
        this.x+=2;
  },
    dwdh: function() {
        this.dwd0();
        for(var i=0;i<8;i++) 
        { this.cx.drawImage(this.idh, this.x,this.y, this.qW, 2  ); this.x+=this.qW; }
        this.dwd0();
        this.x = 0;this.y+=2;
  },        
    dwdv: function() {
        this.cx.drawImage(this.idv, this.x,this.y, 2, this.qH );
        this.x+=2;        
  }
  
    }

_b2D_canvas.init();
