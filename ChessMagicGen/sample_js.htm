<html>
<head>
<title>Chess Magic Numbers in action</title>
<link rel="shortcut icon" href="/favicon.ico" type="image/vnd.microsoft.icon"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="site" content="chessforeva.blogspot.com" />
</head>
<!--
	These magics are generated by tool with param.
		magicgen.exe -b16
-->
<body onload="Loaded()">

<script src="uint64.js" type="text/javascript"></script>

<font style="font-family:courier">
<table>
<tr>
<td valign="top">
Here are chess magic numbers calculations<br><br>
<div id="output"><b>Wait few seconds</b> on loading,<br> onetime prepare-s...</div>
</td>

<script type="text/javascript">

/*
types:
 U64 unsigned long long
 U32 unsigned int
 U16 unsigned short
 U8  unsigned char
*/

var B2G7=i64s("0x007E7E7E7E7E7E00LL");

// pre-generated constants, magicgen bc16

var /*static const U64*/ BishopMagics = [
// Magics for bishops
i64s("0x6CFFD8B9D37E06BB") /*A1 >>48*/, i64s("0x7C178C7BF7F57CAE") /*B1 >>48*/, i64s("0xBD98AC81272FB5B8") /*C1 >>48*/, i64s("0xEDFAE51870C9F19F") /*D1 >>48*/, i64s("0x87F47FB1C074593A") /*E1 >>48*/, i64s("0xD7C16D85CA270CF5") /*F1 >>48*/, i64s("0x5BA782D5B7C17BB3") /*G1 >>48*/, i64s("0x3A4C9A5ACF80510D") /*H1 >>48*/,
i64s("0x6D57FAB6246EF2B3") /*A2 >>48*/, i64s("0x0BD74D62FC617A7B") /*B2 >>48*/, i64s("0x9584DA4D20B959BD") /*C2 >>48*/, i64s("0x6F723DEBECA069F4") /*D2 >>48*/, i64s("0xF4ACC795CB2D5CB5") /*E2 >>48*/, i64s("0x43C4F193D04AD6A9") /*F2 >>48*/, i64s("0x612085F344704B15") /*G2 >>48*/, i64s("0xE1A9E4CF7060D21F") /*H2 >>48*/,
i64s("0x596BEA7F05C0FE36") /*A3 >>48*/, i64s("0x6214025A7E63AD2F") /*B3 >>48*/, i64s("0x15912315DA5016A0") /*C3 >>48*/, i64s("0xBB3A96FA5092215F") /*D3 >>48*/, i64s("0x51C771E8BDF392C0") /*E3 >>48*/, i64s("0x7AEB8FC497D0BC32") /*F3 >>48*/, i64s("0x36FB5CF010EC579E") /*G3 >>48*/, i64s("0x34EB7C64AE28C243") /*H3 >>48*/,
i64s("0x4212BD8C83A6E4C0") /*A4 >>48*/, i64s("0xE0412592D1C1C3FF") /*B4 >>48*/, i64s("0x7751B104DA2A81FB") /*C4 >>48*/, i64s("0xF730B59B8571381C") /*D4 >>48*/, i64s("0x634900EA035C3400") /*E4 >>48*/, i64s("0xC840D3F3B6F9B929") /*F4 >>48*/, i64s("0x39C239F3FC93CB76") /*G4 >>48*/, i64s("0x66C5D96788357B03") /*H4 >>48*/,
i64s("0xD9824BEFC9415C11") /*A5 >>48*/, i64s("0xCD7DF0EFE183E6E3") /*B5 >>48*/, i64s("0xD79C76F086E33E64") /*C5 >>48*/, i64s("0x4DBA5F8501CE2400") /*D5 >>48*/, i64s("0xCBAF744A8043F100") /*E5 >>48*/, i64s("0x617DBA463E646CFF") /*F5 >>48*/, i64s("0x61B7B064856AD941") /*G5 >>48*/, i64s("0x5E682D8D0B916E5D") /*H5 >>48*/,
i64s("0xFD9CACF9DA01803E") /*A6 >>48*/, i64s("0xF6779696FF3E7EE0") /*B6 >>48*/, i64s("0x6FE2E5338E0C1248") /*C6 >>48*/, i64s("0x72165A308C570B6E") /*D6 >>48*/, i64s("0xAF7756B732E846E2") /*E6 >>48*/, i64s("0x6B1A5D734E172568") /*F6 >>48*/, i64s("0x2197A3345514B9D9") /*G6 >>48*/, i64s("0x678DBC7501FB2C50") /*H6 >>48*/,
i64s("0x78612467DABD1F04") /*A7 >>48*/, i64s("0x33966792F76720D1") /*B7 >>48*/, i64s("0x96C66374DDFB3360") /*C7 >>48*/, i64s("0x53860F0EE0C8CD45") /*D7 >>48*/, i64s("0x534290A02B766B2C") /*E7 >>48*/, i64s("0x5595C747518329FB") /*F7 >>48*/, i64s("0x4370788E0145B955") /*G7 >>48*/, i64s("0xFD35BBAF299013D9") /*H7 >>48*/,
i64s("0x6E266965ADAF646C") /*A8 >>48*/, i64s("0xA1DEEFF0A585674F") /*B8 >>48*/, i64s("0xD262607972DD3A36") /*C8 >>48*/, i64s("0xD46BC2B72BF218A5") /*D8 >>48*/, i64s("0x562CDC3F02EC43F5") /*E8 >>48*/, i64s("0x2AA80F72248BE656") /*F8 >>48*/, i64s("0x91F23AC46A1EE715") /*G8 >>48*/, i64s("0x013FB443B15EB41A") /*H8 >>48*/
];

var /*static const U64*/ RookMagics = [
// Magics for rooks
i64s("0xFF260527D2CAC700") /*A1 >>48*/, i64s("0x4CF0F24E7D5A5800") /*B1 >>48*/, i64s("0x829576FC130A3080") /*C1 >>48*/, i64s("0x5CFB475FC91E1100") /*D1 >>48*/, i64s("0x1C6E08D3004F2600") /*E1 >>48*/, i64s("0xF1B1998208AC1078") /*F1 >>48*/, i64s("0x06FCBDB2CB1BC4A8") /*G1 >>48*/, i64s("0x938C7FC1E07D6298") /*H1 >>48*/,
i64s("0x4E2D37B8F9E42E39") /*A2 >>48*/, i64s("0x45719CD9ACBBEB00") /*B2 >>48*/, i64s("0x29FBB48EFBF98AC0") /*C2 >>48*/, i64s("0xBBE3DBB8542C8C80") /*D2 >>48*/, i64s("0x1B0CBBC889E0A010") /*E2 >>48*/, i64s("0x784844442DBFABB8") /*F2 >>48*/, i64s("0x08320F627EE206D0") /*G2 >>48*/, i64s("0xE651EECBDD946AE0") /*H2 >>48*/,
i64s("0xBD8AEA197A509A03") /*A3 >>48*/, i64s("0x6412AE5F67893D00") /*B3 >>48*/, i64s("0x4CD4742FDEAA6A00") /*C3 >>48*/, i64s("0x324FDAC71DBAE100") /*D3 >>48*/, i64s("0x0D6F612384FF4DB0") /*E3 >>48*/, i64s("0xC0322570866933F0") /*F3 >>48*/, i64s("0xFE527633BA19DCCC") /*G3 >>48*/, i64s("0x65DD6D0E8C0A245C") /*H3 >>48*/,
i64s("0xCCD36B245D1A34BF") /*A4 >>48*/, i64s("0x301B25F9D1808F00") /*B4 >>48*/, i64s("0xCDD5B0E696401E00") /*C4 >>48*/, i64s("0xAA567462A1BFE7C0") /*D4 >>48*/, i64s("0xCB8D9FFE2B0A4540") /*E4 >>48*/, i64s("0xB002D050508A8808") /*F4 >>48*/, i64s("0x90DBCB9AA74E5DEC") /*G4 >>48*/, i64s("0x52BD607AD16823CE") /*H4 >>48*/,
i64s("0x6789D8D2F2B06E12") /*A5 >>48*/, i64s("0x84DBDAD1C0C9E180") /*B5 >>48*/, i64s("0xECA9A368B64154C0") /*C5 >>48*/, i64s("0xCB663F3098641DE0") /*D5 >>48*/, i64s("0x900DB76EA2B3CE30") /*E5 >>48*/, i64s("0x09A70669D4010E20") /*F5 >>48*/, i64s("0xC512D6EE770DE5A0") /*G5 >>48*/, i64s("0x797423BE8627BC94") /*H5 >>48*/,
i64s("0x8A3D575077F24F63") /*A6 >>48*/, i64s("0x0EC9B8F218AB9D00") /*B6 >>48*/, i64s("0x0C8587D6C0DD33C0") /*C6 >>48*/, i64s("0x60AF95CADD982560") /*D6 >>48*/, i64s("0xACC5169EB71CA590") /*E6 >>48*/, i64s("0x160D1C32B7BC6398") /*F6 >>48*/, i64s("0x88B6F3A8886C2D2A") /*G6 >>48*/, i64s("0x4C5BC7A588A0AB5C") /*H6 >>48*/,
i64s("0x0A2F0CEF3B7D0C39") /*A7 >>48*/, i64s("0xEF4D5C4858599E00") /*B7 >>48*/, i64s("0x1B041BF13B674200") /*C7 >>48*/, i64s("0xFB6B678E03BAAE00") /*D7 >>48*/, i64s("0xC277382FB0280FE0") /*E7 >>48*/, i64s("0x5C8971741F006128") /*F7 >>48*/, i64s("0x8A909A7AC999AAAC") /*G7 >>48*/, i64s("0x5405CD9DAE7D3E08") /*H7 >>48*/,
i64s("0x9D4D6B7CC2DAD786") /*A8 >>48*/, i64s("0xCE3D0AD07A35766A") /*B8 >>48*/, i64s("0xC0EA25A977591592") /*C8 >>48*/, i64s("0xC5C9BB5E7D8EF022") /*D8 >>48*/, i64s("0xB1552E04EC9C49E9") /*E8 >>48*/, i64s("0x9C16B80885B53F9E") /*F8 >>48*/, i64s("0xDE285EF1DAC7D27A") /*G8 >>48*/, i64s("0x441830E566CDF37A") /*H8 >>48*/
];

     // pre-calculated masks to make keys list
var /*static const U64*/ BishopMask = [
i64s("0x8040201008040200"), i64s("0x0080402010080500"), i64s("0x0000804020110A00"), i64s("0x0000008041221400"), i64s("0x0000000182442800"), i64s("0x0000010204885000"), i64s("0x000102040810A000"), i64s("0x0102040810204000"), i64s("0x4020100804020002"), i64s("0x8040201008050005"), i64s("0x00804020110A000A"), i64s("0x0000804122140014"), i64s("0x0000018244280028"), i64s("0x0001020488500050"), i64s("0x0102040810A000A0"), i64s("0x0204081020400040"), i64s("0x2010080402000204"), i64s("0x4020100805000508"), i64s("0x804020110A000A11"), i64s("0x0080412214001422"), i64s("0x0001824428002844"), i64s("0x0102048850005088"), i64s("0x02040810A000A010"), i64s("0x0408102040004020"), i64s("0x1008040200020408"), i64s("0x2010080500050810"), i64s("0x4020110A000A1120"), i64s("0x8041221400142241"), i64s("0x0182442800284482"), i64s("0x0204885000508804"), i64s("0x040810A000A01008"), i64s("0x0810204000402010"), i64s("0x0804020002040810"), i64s("0x1008050005081020"), i64s("0x20110A000A112040"), i64s("0x4122140014224180"), i64s("0x8244280028448201"), i64s("0x0488500050880402"), i64s("0x0810A000A0100804"), i64s("0x1020400040201008"), i64s("0x0402000204081020"), i64s("0x0805000508102040"), i64s("0x110A000A11204080"), i64s("0x2214001422418000"), i64s("0x4428002844820100"), i64s("0x8850005088040201"), i64s("0x10A000A010080402"), i64s("0x2040004020100804"), i64s("0x0200020408102040"), i64s("0x0500050810204080"), i64s("0x0A000A1120408000"), i64s("0x1400142241800000"), i64s("0x2800284482010000"), i64s("0x5000508804020100"), i64s("0xA000A01008040201"), i64s("0x4000402010080402"), i64s("0x0002040810204080"), i64s("0x0005081020408000"), i64s("0x000A112040800000"), i64s("0x0014224180000000"), i64s("0x0028448201000000"), i64s("0x0050880402010000"), i64s("0x00A0100804020100"), i64s("0x0040201008040201")
];

var /*static const U64*/ RookMask = [
i64s("0x01010101010101FE"), i64s("0x02020202020202FD"), i64s("0x04040404040404FB"), i64s("0x08080808080808F7"), i64s("0x10101010101010EF"), i64s("0x20202020202020DF"), i64s("0x40404040404040BF"), i64s("0x808080808080807F"), i64s("0x010101010101FE01"), i64s("0x020202020202FD02"), i64s("0x040404040404FB04"), i64s("0x080808080808F708"), i64s("0x101010101010EF10"), i64s("0x202020202020DF20"), i64s("0x404040404040BF40"), i64s("0x8080808080807F80"), i64s("0x0101010101FE0101"), i64s("0x0202020202FD0202"), i64s("0x0404040404FB0404"), i64s("0x0808080808F70808"), i64s("0x1010101010EF1010"), i64s("0x2020202020DF2020"), i64s("0x4040404040BF4040"), i64s("0x80808080807F8080"), i64s("0x01010101FE010101"), i64s("0x02020202FD020202"), i64s("0x04040404FB040404"), i64s("0x08080808F7080808"), i64s("0x10101010EF101010"), i64s("0x20202020DF202020"), i64s("0x40404040BF404040"), i64s("0x808080807F808080"), i64s("0x010101FE01010101"), i64s("0x020202FD02020202"), i64s("0x040404FB04040404"), i64s("0x080808F708080808"), i64s("0x101010EF10101010"), i64s("0x202020DF20202020"), i64s("0x404040BF40404040"), i64s("0x8080807F80808080"), i64s("0x0101FE0101010101"), i64s("0x0202FD0202020202"), i64s("0x0404FB0404040404"), i64s("0x0808F70808080808"), i64s("0x1010EF1010101010"), i64s("0x2020DF2020202020"), i64s("0x4040BF4040404040"), i64s("0x80807F8080808080"), i64s("0x01FE010101010101"), i64s("0x02FD020202020202"), i64s("0x04FB040404040404"), i64s("0x08F7080808080808"), i64s("0x10EF101010101010"), i64s("0x20DF202020202020"), i64s("0x40BF404040404040"), i64s("0x807F808080808080"), i64s("0xFE01010101010101"), i64s("0xFD02020202020202"), i64s("0xFB04040404040404"), i64s("0xF708080808080808"), i64s("0xEF10101010101010"), i64s("0xDF20202020202020"), i64s("0xBF40404040404040"), i64s("0x7F80808080808080")
];

// arrays to prepare

    // The lookup table of legal moves, shifting 16 bits
var /*U64*/ BishopLegalsTable=[];	//[64][1<<16]
var /*U64*/ RookLegalsTable=[];		//[64][1<<16]

function /*U64*/ getBishopMove( /*U8*/square, /*U64*/ occupancy ) {
	var /*U64*/ occ = i64_and( occupancy, BishopMask[square] );
	var /*U64*/ mult = i64_mul( occ, BishopMagics[square] );
	var /*U16*/ index = (mult.h>>>16);	// 64-48
    return BishopLegalsTable[square][index];
}

function /*U64*/ getRookMove( /*U8*/square, /*U64*/ occupancy ) {
	var /*U64*/ occ = i64_and( occupancy, RookMask[square] );
	var /*U64*/ mult = i64_mul( occ, RookMagics[square] );
	var /*U16*/ index = (mult.h>>>16);	// 64-48
    return RookLegalsTable[square][index];
}

// ---------------------- prepares arrays
//
// variables

var /*U64*/ Bo1={}, Bo2={};    // boards
var SqI=0;        // square to prepare
var b_r=0;        // 1-bishops, 0-rooks

function gdir(dv,dh) {

	var V=(SqI>>3),H=(SqI&7);
	V+=dv; H+=dh;
	while( (V>=0 && V<8) && (H>=0 && H<8) ) {
		var sq = (V<<3)|H;
		i64_bitset(Bo2, sq);
		if( i64_bitat(Bo1,sq) ) {
				return;		// stop this direction
			}
		V+=dv; H+=dh;
		}
	}

function gen2dir() {

    if(b_r) {   //bishops
        gdir(-1,-1); gdir(+1,-1); gdir(-1,+1); gdir(+1,+1);
    }
    else {  // rooks
        gdir(-1,0); gdir(+1,0); gdir(0,+1); gdir(0,-1);
    }
}

// Does all the permutations for the current square and Bo1 board
function Permutate() {

	var bits = [];	//[64] This will contain square numbers
	var n=0,sq=0;
	for(;sq<64;sq++) {
		if(i64_bitat(Bo1,sq)) bits[n++]=sq;
		}

	var LEN = (1<<n);			// length of permutations table
	for(var i=0;i<LEN;i++) {	// go through all the cases

        Bo1 = i64();
        for(var j=0;j<n;j++)	// scan as bits
		{
            if(i&(1<<j)) i64_bitset(Bo1,bits[j]);
		}
        // now Bo1 contains occupancy

        var /*U64*/ mult = i64_mul( Bo1, (b_r ? BishopMagics[SqI] : RookMagics[SqI]) );
        var /*U16*/ index = (mult.h>>>16);		//	64-48=16
        
		Bo2 = i64();
        gen2dir();      // find legal moves for square, put in Bo2

        if(b_r) BishopLegalsTable[SqI][index] = Bo2;
        else RookLegalsTable[SqI][index] = Bo2;
	}
}

function prepare_tables() {

    for(SqI=0;SqI<64;SqI++) {
		BishopLegalsTable[SqI] = [];
        Bo1 = BishopMask[SqI];
		b_r = 1;
		Permutate();
		
		RookLegalsTable[SqI] = [];
        Bo1 = RookMask[SqI];
		b_r = 0;
		Permutate();
        }
}

// ----------------------

function BoardToString(/*U64*/ Bo) {
	var s='';
    for(var V=7;V>=0;V--) {
        for(var H=0;H<=7;H++) {
            var i=(V<<3)|H;
            s+=( i64_bitat(Bo, i) ? '<b>X</b>': 'o' ) ;
        }
        s+='<br>';
    }
	return s+'<br>';
}

function StartIt() {

    prepare_tables();	// This is slow for javascript

    var /*U64*/ Occ = i64();
	    // put any pieces on A8 B7 E3
    i64_bitset(Occ,56);
	i64_bitset(Occ,49);
	i64_bitset(Occ,20);
	
	var outp = 'Occupancy of pieces = A8 B7 E3<br><br>';

    var /*U64*/ bishop_E4 = getBishopMove(28,Occ);
    outp+= 'Bishop E4<br>'+BoardToString(bishop_E4)+'<br>';

    var /*U64*/ rook_E5 = getRookMove(36,Occ);
    outp+= 'Rook E5<br>'+BoardToString(rook_E5)+'<br>';

	document.getElementById("output").innerHTML = outp;
}

function Loaded() {
	setTimeout('StartIt()',333);
}

</script>

<td width="80"> </td>
<td valign="top">
Other samples online in action:<br><br>
<a href="https://chessforeva.gitlab.io/C0_jsCuckoo.htm" target="blank">3D-Cuckoo</a>, js source
<a href="https://chessforeva.gitlab.io/jsCuckoo.js" target="blank">jsCuckoo.js</a><br><br>

<a href="https://chessforeva.gitlab.io/C0_jsOliThink.htm" target="blank">3D-OliThink</a>, js source
<a href="https://chessforeva.gitlab.io/oliThink.js" target="blank">oliThink.js</a><br><br>
<br>
<a href="https://chessforeva.gitlab.io/js64bit_math.htm" target="blank">help on int64 in javascript</a>
</td>
</tr>
</table>

</FONT>
</body>
</html>